<?php

// задание 1
class Factorial
{
    private int $number;

    public function __construct(int $number)
    {
        $this->number = $number;
    }

    public function calculate(): int
    {
        $result = 1;
        for ($i = 1; $i <= $this->number; $i++) {
            $result *= $i;
        }

        return $result;
    }

}

echo "Факториал числа 5 = " . (new Factorial(5))->calculate();
echo "<br>";

// задание 2


class Calculator
{

    public function sum(int $firstNumber, int $secondNumber): int
    {
        return $firstNumber + $secondNumber;
    }

    public function minus(int $firstNumber, int $secondNumber): int
    {
        return $firstNumber - $secondNumber;
    }

    public function division(int $firstNumber, int $secondNumber): int
    {
        return $firstNumber / $secondNumber;
    }

    public function multiplication(int $firstNumber, int $secondNumber): int
    {
        return $firstNumber * $secondNumber;
    }
}

$calculation = new Calculator();
switch ($_POST["sign"]) {
    case "+":
        echo $calculation->sum($_POST["first-number"], $_POST["second-number"]);
        break;
    case "-":
        echo $calculation->minus($_POST["first-number"], $_POST["second-number"]);
        break;
    case "/":
        echo $calculation->division($_POST["first-number"], $_POST["second-number"]);
        break;
    case "*":
        echo $calculation->multiplication($_POST["first-number"], $_POST["second-number"]);
        break;
}

// задание 3

class Authorisation
{
    const FILE_PATHS = "data.json";
    private array $user;

    public function __construct(string $login, string $password, string $name)
    {
        $this->user = ["login" => $login, "password" => $password, "name" => $name];
    }

    public function login()
    {
        $users = file_get_contents(self::FILE_PATHS);

        if (empty($users)) {
            $this->addUserToFile();

            return;
        }

        $users = json_decode($users, true);

        $this->isUserExist($users) ? $this->writeUserSession() : $this->addUserToFile();
    }

    private function isUserExist(array $users): bool
    {
        foreach ($users as $item) {
            if ($this->user["login"] === $item["login"] && $this->user["password"] === $item["password"]) {
                return true;
            }
        }

        return false;
    }

    private function writeUserSession()
    {
        session_start();
        $_SESSION["login"] = $this->user["login"];
        $_SESSION["password"] = $this->user["password"];
        $_SESSION["name"] = $this->user["name"];
        echo "<br>";
        echo "Привет, " . $this->user["name"];
    }

    private function addUserToFile()
    {
        $users[] = $this->user;
        file_put_contents(self::FILE_PATHS, json_encode($users));
    }
}

$authorisation = new Authorisation($_POST['login'], $_POST['password'], $_POST['name']);
$authorisation->login();

// задание 4

class Figure
{
    public function shape()
    {
    }

    public function color()
    {
    }

}

class Circle extends Figure
{
    public function color()
    {
        parent::color(); // TODO: Change the autogenerated stub
    }
}

class Square extends Figure
{
    public function shape()
    {
        parent::shape(); // TODO: Change the autogenerated stub
    }
}
